{"ast":null,"code":"var _s = $RefreshSig$();\nimport { deleteApi, getApi, postApi, putApi } from \"../utils/api\";\nimport useAppContext from \"./useAppContextHook\";\nexport default function useUser() {\n  _s();\n  const {\n    dispatch,\n    appState: {\n      user: {\n        username\n      }\n    }\n  } = useAppContext();\n  const userLogin = async (data = {}) => {\n    try {\n      const resp = await postApi(\"/user/authenticate\", data, false);\n      if (resp) {\n        dispatch({\n          type: \"LOGIN\",\n          payload: resp\n        });\n      } else {\n        throw new Error(\"Invalid credentials\");\n      }\n      return resp;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const userSignUp = async (data = {}) => {\n    try {\n      const resp = await postApi(\"/user/new\", data, false);\n      if (resp) {\n        return true;\n      } else {\n        throw new Error(\"Unable to create new user\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n  const getUserProfile = async (username, token) => {\n    dispatch({\n      type: \"PROFILE_LOADING\",\n      payload: true\n    });\n    try {\n      const resp = await getApi(`/profile/get/${username}`, token);\n      if (resp && typeof resp === \"string\") {\n        dispatch({\n          type: \"PROFILE_UPDATE\",\n          payload: {\n            data: {},\n            available: false\n          }\n        });\n      } else if (resp) {\n        dispatch({\n          type: \"PROFILE_UPDATE\",\n          payload: {\n            data: resp,\n            available: true\n          }\n        });\n      } else {\n        throw new Error(\"Something went wrong\");\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      dispatch({\n        type: \"PROFILE_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const addProfile = async (data = {}) => {\n    try {\n      const resp = await postApi(\"/profile/create\", data);\n      if (resp && typeof resp !== \"string\") {\n        dispatch({\n          type: \"PROFILE_UPDATE\",\n          payload: {\n            data: resp,\n            available: true\n          }\n        });\n      }\n      return resp;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const updateProfile = async (data = {}) => {\n    try {\n      const resp = await putApi(`/profile/update/${username}`, data);\n      if (resp && typeof resp !== \"string\") {\n        dispatch({\n          type: \"PROFILE_UPDATE\",\n          payload: {\n            data: resp,\n            available: true\n          }\n        });\n      }\n      return resp;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const sendCode = async email => {\n    try {\n      const resp = await postApi(\"/user/sendCode\", {\n        email\n      }, false);\n      if (resp) {\n        return true;\n      } else {\n        throw new Error(\"Unable to create or email already exists\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      const resp = await postApi(\"/user/forgotPassword\", {\n        email\n      }, false);\n      if (resp) {\n        return true;\n      } else {\n        throw new Error(\"Unable to reset password\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n  const changePassword = async ({\n    email,\n    code,\n    password\n  }) => {\n    try {\n      const resp = await postApi(`/user/changePassword/${code}/${email}/${password}`, {}, false);\n      if (resp) {\n        return true;\n      } else {\n        throw new Error(\"Unable to change new password\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n  const getAllUsers = async () => {\n    try {\n      const data = await getApi(\"/user/all\");\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const deleteUser = async (email = \"\") => {\n    try {\n      const data = await deleteApi(`/user/delete/${email}`, {\n        email\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n  return {\n    userLogin,\n    userSignUp,\n    getUserProfile,\n    addProfile,\n    updateProfile,\n    sendCode,\n    forgotPassword,\n    changePassword,\n    getAllUsers,\n    deleteUser\n  };\n}\n_s(useUser, \"n0v+XeHHPBI+kYd2h2hAfNS/2mU=\", false, function () {\n  return [useAppContext];\n});","map":{"version":3,"names":["deleteApi","getApi","postApi","putApi","useAppContext","useUser","_s","dispatch","appState","user","username","userLogin","data","resp","type","payload","Error","error","userSignUp","getUserProfile","token","available","addProfile","updateProfile","sendCode","email","forgotPassword","changePassword","code","password","getAllUsers","deleteUser"],"sources":["C:/Users/S556370/Desktop/Final Project/project/src/hooks/useUserHook.js"],"sourcesContent":["import { deleteApi, getApi, postApi, putApi } from \"../utils/api\";\r\nimport useAppContext from \"./useAppContextHook\";\r\n\r\nexport default function useUser() {\r\n  const {\r\n    dispatch,\r\n    appState: {\r\n      user: { username },\r\n    },\r\n  } = useAppContext();\r\n\r\n  const userLogin = async (data = {}) => {\r\n    try {\r\n      const resp = await postApi(\"/user/authenticate\", data, false);\r\n      if (resp) {\r\n        dispatch({ type: \"LOGIN\", payload: resp });\r\n      } else {\r\n        throw new Error(\"Invalid credentials\");\r\n      }\r\n      return resp;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const userSignUp = async (data = {}) => {\r\n    try {\r\n      const resp = await postApi(\"/user/new\", data, false);\r\n      if (resp) {\r\n        return true;\r\n      } else {\r\n        throw new Error(\"Unable to create new user\");\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const getUserProfile = async (username, token) => {\r\n    dispatch({ type: \"PROFILE_LOADING\", payload: true });\r\n    try {\r\n      const resp = await getApi(`/profile/get/${username}`, token);\r\n      if (resp && typeof resp === \"string\") {\r\n        dispatch({\r\n          type: \"PROFILE_UPDATE\",\r\n          payload: {\r\n            data: {},\r\n            available: false,\r\n          },\r\n        });\r\n      } else if (resp) {\r\n        dispatch({\r\n          type: \"PROFILE_UPDATE\",\r\n          payload: {\r\n            data: resp,\r\n            available: true,\r\n          },\r\n        });\r\n      } else {\r\n        throw new Error(\"Something went wrong\");\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      dispatch({ type: \"PROFILE_LOADING\", payload: false });\r\n    }\r\n  };\r\n\r\n  const addProfile = async (data = {}) => {\r\n    try {\r\n      const resp = await postApi(\"/profile/create\", data);\r\n      if (resp && typeof resp !== \"string\") {\r\n        dispatch({\r\n          type: \"PROFILE_UPDATE\",\r\n          payload: {\r\n            data: resp,\r\n            available: true,\r\n          },\r\n        });\r\n      }\r\n      return resp;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (data = {}) => {\r\n    try {\r\n      const resp = await putApi(`/profile/update/${username}`, data);\r\n      if (resp && typeof resp !== \"string\") {\r\n        dispatch({\r\n          type: \"PROFILE_UPDATE\",\r\n          payload: {\r\n            data: resp,\r\n            available: true,\r\n          },\r\n        });\r\n      }\r\n      return resp;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const sendCode = async (email) => {\r\n    try {\r\n      const resp = await postApi(\"/user/sendCode\", { email }, false);\r\n      if (resp) {\r\n        return true;\r\n      } else {\r\n        throw new Error(\"Unable to create or email already exists\");\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      const resp = await postApi(\"/user/forgotPassword\", { email }, false);\r\n      if (resp) {\r\n        return true;\r\n      } else {\r\n        throw new Error(\"Unable to reset password\");\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const changePassword = async ({ email, code, password }) => {\r\n    try {\r\n      const resp = await postApi(`/user/changePassword/${code}/${email}/${password}`, {}, false);\r\n      if (resp) {\r\n        return true;\r\n      } else {\r\n        throw new Error(\"Unable to change new password\");\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const getAllUsers = async () => {\r\n    try {\r\n      const data = await getApi(\"/user/all\");\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deleteUser = async (email = \"\") => {\r\n    try {\r\n      const data = await deleteApi(`/user/delete/${email}`, { email });\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    userLogin,\r\n    userSignUp,\r\n    getUserProfile,\r\n    addProfile,\r\n    updateProfile,\r\n    sendCode,\r\n    forgotPassword,\r\n    changePassword,\r\n    getAllUsers,\r\n    deleteUser,\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}